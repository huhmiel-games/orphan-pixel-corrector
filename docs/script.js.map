{
  "version": 3,
  "sources": ["../src/Task.ts", "../src/script.ts"],
  "sourcesContent": ["export class Task\n{\n    data: ImageData;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    constructor(data: ImageData, x: number, y: number, width: number, height: number)\n    {\n        this.data = data;\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n}\n", "import { Task } from './Task';\nimport { TImage } from './types';\n\n// Html elements\nconst saveImageBtn = document.getElementById('save-image') as HTMLButtonElement;\nconst imageElm = document.getElementById('image') as HTMLImageElement;\nconst imageCanvas = document.getElementById('image-canvas') as HTMLCanvasElement;\nconst leftPanel = document.getElementById('left-panel') as HTMLDivElement;\nconst rightPanel = document.getElementById('right-panel') as HTMLDivElement;\nconst fixedCanvas = document.getElementById('fixed-canvas') as HTMLCanvasElement;\nconst checkCanvas = document.getElementById('check-canvas') as HTMLCanvasElement;\nconst checkOnlyElm = document.getElementById('check-only') as HTMLInputElement;\nconst multipassElm = document.getElementById('multipass') as HTMLInputElement;\nconst consoleElm = document.getElementById('console') as HTMLPreElement;\nconst undoBtn = document.getElementById('undo-btn') as HTMLButtonElement;\nconst redoBtn = document.getElementById('redo-btn') as HTMLButtonElement;\n\n// Data\nconst image: TImage = {\n    name: '',\n    width: 0,\n    height: 0,\n    isLoaded: false,\n    zoom: 1,\n}\n\nlet checkOnly = true;\nlet multipass = false;\nlet pixelCorrectionCount: number = 0;\nlet noPixelCorrectionCount: number = 0;\nlet lastPixelCorrectionCount: number = 0;\nconst undos: Task[] = [];\nconst redos: Task[] = [];\n\nlet visibleModal: HTMLElement | null = null;\nconst navbarHeight = document.querySelector('nav')?.clientHeight || 58;\n\n// Event listeners\n(document.querySelectorAll('[id ^= \"close-\"]')).forEach(elm => elm.addEventListener('click', closeModal));\ndocument.getElementById('open-image')?.addEventListener('change', openImage, false);\ndocument.getElementById('about-btn')?.addEventListener('click', openModal, false);\ndocument.addEventListener('wheel', onMouseWheel, { passive: false });\ndocument.addEventListener('keydown', handleKeyPress);\ndocument.addEventListener('click', pickColor);\ncheckOnlyElm.addEventListener('change', check);\nmultipassElm.addEventListener('change', setMultipass);\nundoBtn.addEventListener('click', undo, false);\nredoBtn.addEventListener('click', redo, false);\nsaveImageBtn.addEventListener('click', downloadTilesetAsImage, false);\nleftPanel.addEventListener('scroll', handleRightScroll);\nrightPanel.addEventListener('scroll', handleLeftScroll);\nfixedCanvas.addEventListener('mousemove', handleCursor)\n\nfunction handleLeftScroll()\n{\n    leftPanel.scroll(rightPanel.scrollLeft, rightPanel.scrollTop);\n}\n\nfunction handleRightScroll()\n{\n    rightPanel.scroll(leftPanel.scrollLeft, leftPanel.scrollTop);\n}\nfunction handleCursor(event)\n{\n    if (event.ctrlKey === true && fixedCanvas.classList.contains('pick-color'))\n    {\n        fixedCanvas.classList.replace('pick-color', 'edit-color');\n    }\n    else if (event.ctrlKey === false && fixedCanvas.classList.contains('edit-color'))\n    {\n        fixedCanvas.classList.replace('edit-color', 'pick-color');\n    }\n}\n\nfunction openModal(event)\n{\n    event.preventDefault();\n    const modal = document.getElementById(event.currentTarget.getAttribute('data-target')) as HTMLDialogElement;\n    modal.open = true;\n    visibleModal = modal;\n}\n\nfunction closeModal(event)\n{\n    visibleModal = null;\n    event.preventDefault();\n    const modal = document.getElementById(event.currentTarget.getAttribute('data-target')) as HTMLDialogElement;\n    modal.open = false;\n}\n\n// Image canvas\nfunction openImage(event)\n{\n    const imageFiles = event.target.files;\n    const imageFilesLength = imageFiles.length;\n    if (imageFilesLength > 0)\n    {\n        image.name = imageFiles.name;\n        const imageSrc = URL.createObjectURL(imageFiles[0]);\n        imageElm.src = imageSrc;\n        imageElm.addEventListener('load', (e) =>\n        {\n            image.width = imageElm.naturalWidth;\n            image.height = imageElm.naturalHeight;\n            imageCanvas.classList.remove('none');\n            drawImage(imageCanvas, imageElm);\n            drawImage(fixedCanvas, imageElm);\n            checkCanvas.width = image.width;\n            checkCanvas.height = image.height;\n            image.isLoaded = true;\n            noPixelCorrectionCount = 0;\n            checkOrphanPixels();\n            showAlertResult();\n        }, { once: true });\n    }\n}\n\nfunction showAlertResult()\n{\n    const date = new Date().toLocaleString();\n    const codeElm = document.createElement('code');\n\n    codeElm.innerText = `${date}\n${pixelCorrectionCount} pixels found.\n${noPixelCorrectionCount} pixels found without viable correction.\n-------------------\n`;\n    consoleElm.insertBefore(codeElm, consoleElm.children[0]);\n}\n\nfunction reset()\n{\n    const ctx = imageCanvas.getContext('2d');\n    const ctx2 = fixedCanvas.getContext('2d');\n    if (!ctx || !ctx2) return;\n    ctx.clearRect(0, 0, image.width, image.height);\n    ctx2.clearRect(0, 0, image.width, image.height);\n    drawImage(imageCanvas, imageElm);\n    drawImage(fixedCanvas, imageElm);\n    pixelCorrectionCount = 0;\n    noPixelCorrectionCount = 0;\n    lastPixelCorrectionCount = 0;\n}\n\nfunction checkOrphanPixels()\n{\n    const ctx = imageCanvas.getContext('2d');\n    const ctx2 = fixedCanvas.getContext('2d');\n    const ctx3 = checkCanvas.getContext('2d');\n    if (!ctx || !ctx2 || !ctx3) return;\n\n    const width = image.width;\n    const height = image.height;\n\n    const hexColor = (document.getElementById('check-color') as HTMLInputElement).value;\n    const rgbColor = hexToRGB(hexColor);\n\n    for (let y = 0; y < height; y += 1)\n    {\n        for (let x = 0; x < width; x += 1)\n        {\n            const checkedPixel = ctx.getImageData(x, y, 1, 1);\n            const checkedPixelColor = `${checkedPixel.data[0]}-${checkedPixel.data[1]}-${checkedPixel.data[2]}-${checkedPixel.data[3]}`;\n\n            // no action if checked pixel color is transparent\n            if (checkedPixelColor === '0-0-0-0') continue;\n\n            const neighboringColors = getNeighboringColors(ctx, x, y);\n\n            if (neighboringColors.includes(checkedPixelColor)) continue;\n\n            const mainColor = getMainColor(neighboringColors);\n\n            if (checkOnly === true)\n            {\n                checkedPixel.data[0] = rgbColor[0];\n                checkedPixel.data[1] = rgbColor[1];\n                checkedPixel.data[2] = rgbColor[2];\n                checkedPixel.data[3] = 255;\n                ctx3.putImageData(checkedPixel, x, y);\n                // no pixel correction found\n                if (!mainColor) noPixelCorrectionCount += 1;\n            }\n            if (neighboringColors.length > 0)\n            {\n                // no pixel correction found\n                if (!mainColor)\n                {\n                    noPixelCorrectionCount += 1;\n                    continue;\n                }\n\n                const rgba = mainColor.split('-');\n                checkedPixel.data[0] = +rgba[0];\n                checkedPixel.data[1] = +rgba[1];\n                checkedPixel.data[2] = +rgba[2];\n                checkedPixel.data[3] = +rgba[3];\n                pixelCorrectionCount += 1;\n                ctx2.putImageData(checkedPixel, x, y);\n            }\n        }\n    }\n\n    if (multipass && lastPixelCorrectionCount !== noPixelCorrectionCount)\n    {\n        lastPixelCorrectionCount = noPixelCorrectionCount;\n        noPixelCorrectionCount = 0;\n        const data = ctx2.getImageData(0, 0, width, height);\n        ctx.putImageData(data, 0, 0);\n        checkOrphanPixels();\n    }\n}\n\nfunction getNeighboringColors(ctx: CanvasRenderingContext2D, pixelX: number, pixelY: number): string[]\n{\n    const pixels = ctx.getImageData(pixelX - 1, pixelY - 1, 3, 3).data;\n\n    let colors: string[] = [];\n    for (let i = 0; i < pixels.length; i += 4)\n    {\n        const pixelColor = `${pixels[i]}-${pixels[i + 1]}-${pixels[i + 2]}-${pixels[i + 3]}`;\n        colors.push(pixelColor)\n    }\n\n    // remove the checked pixel\n    colors.splice(4, 1);\n\n    // remove transparent pixels\n    const colorWithoutTransparent = colors.filter(color => color !== '0-0-0-0');\n\n    return colorWithoutTransparent;\n}\n\nfunction getMainColor(arr: string[]): string | undefined\n{\n    // https://stackoverflow.com/a/42882983\n    const obj = arr.reduce((acc, value) =>\n    {\n        // define the property if not defined\n        acc[value] = acc[value] || 0;\n        // increment the count\n        acc[value]++;\n        // return the object reference\n        return acc;\n        // set initial value as an empty object\n    }, {});\n\n    // reduce into a single value which holds the highest value\n    const mainColor = Object.keys(obj).reduce((acc, value) => obj[value] > obj[acc] ? value : acc);\n    const colorCount = arr.filter(color => color === mainColor);\n\n    if (colorCount.length <= 1)\n    {\n        return undefined;\n    }\n\n    return mainColor;\n}\n\nfunction check()\n{\n    checkOnly = !checkOnly;\n    if (image.isLoaded)\n    {\n        checkCanvas.style.display = checkOnly ? 'block' : 'none';\n        // reset();\n        // checkOrphanPixels();\n        // showAlertResult();\n    }\n}\n\nfunction setMultipass()\n{\n    multipass = !multipass;\n    if (image.isLoaded)\n    {\n        reset();\n        checkOrphanPixels();\n        showAlertResult();\n    }\n}\n\nfunction downloadTilesetAsImage()\n{\n    const fixedImage = fixedCanvas.toDataURL('image/png');\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = 'blob';\n    xhr.onload = function ()\n    {\n        let a = document.createElement('a');\n        a.href = window.URL.createObjectURL(xhr.response);\n        a.download = image.name;\n        a.style.display = 'none';\n        document.body.appendChild(a);\n        a.click();\n        a.remove();\n    };\n    xhr.open('GET', fixedImage);\n    xhr.send();\n}\n\n// Zoom\nfunction onMouseWheel(event)\n{\n    if (event.ctrlKey) event.preventDefault();\n\n    // zoom image\n    if (event.ctrlKey && image.isLoaded)\n    {\n        let scrollX: number = 0;\n        let scrollY: number = 0;\n        // const zoomFactor = 1/image.width * 100;\n        const zoomFactor = 1;\n\n        if (event.wheelDelta > 0)\n        {\n            if (image.zoom === 64) return;\n            image.zoom = clamp(image.zoom + zoomFactor, 0, 64);\n            scrollX = (event.offsetX - event.clientX / 2) * 2;\n            scrollY = (event.offsetY - (event.clientY - navbarHeight) / 2) * 2;\n\n        }\n        else if (event.wheelDelta < 0)\n        {\n            if (image.zoom < 0.02) return;\n            image.zoom -= zoomFactor;\n            scrollX = (event.offsetX - event.clientX * 2) / 2;\n            scrollY = (event.offsetY - (event.clientY - navbarHeight) * 2) / 2;\n        }\n\n        imageCanvas.style.width = image.width * image.zoom + 'px';\n        imageCanvas.style.height = image.height * image.zoom + 'px';\n        fixedCanvas.style.width = image.width * image.zoom + 'px';\n        fixedCanvas.style.height = image.height * image.zoom + 'px';\n        checkCanvas.style.width = image.width * image.zoom + 'px';\n        checkCanvas.style.height = image.height * image.zoom + 'px';\n        leftPanel.scroll(scrollX, scrollY);\n        rightPanel.scroll(scrollX, scrollY);\n    }\n}\n\n// Key press\nfunction handleKeyPress(event: KeyboardEvent)\n{\n    if (event.ctrlKey && event.key === 'z' && undos.length)\n    {\n        event.preventDefault();\n        undo();\n        return;\n    }\n\n    if (event.ctrlKey && event.key === 'y' && redos.length)\n    {\n        event.preventDefault();\n        redo();\n        return;\n    }\n\n    if (event.ctrlKey && event.key === 's' && image.isLoaded)\n    {\n        event.preventDefault();\n        downloadTilesetAsImage();\n        return;\n    }\n}\n\n// Utils\nfunction drawImage(canvas: HTMLCanvasElement, img: HTMLImageElement, x = 0, y = 0)\n{\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    canvas.width = img.naturalWidth;\n    canvas.height = img.naturalHeight;\n    ctx.drawImage(img, x, y);\n}\n\nfunction clamp(number: number, min: number, max: number)\n{\n    return Math.max(min, Math.min(number, max));\n}\n\nfunction hexToRGB(hex: string)\n{\n    hex = hex.toUpperCase();\n\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n\n    return [r, g, b];\n}\n\nfunction RGBAToHexA(rgba: number[], forceRemoveAlpha = false)\n{\n    return \"#\" +\n        rgba.map((number: { toString: (arg0: number) => any; }) => number.toString(16)) // Converts numbers to hex\n            .map((string: string | any[]) => string.length === 1 ? \"0\" + string : string) // Adds 0 when length of one number is 1\n            .join(\"\")\n}\n\nfunction pickColor(event: MouseEvent)\n{\n    // @ts-expect-error\n    if (event.target.id === 'image-canvas')\n    {\n        const ctx = imageCanvas.getContext('2d');\n        if (!ctx) return;\n\n        const x = event.offsetX / image.zoom;\n        const y = event.offsetY / image.zoom;\n\n        const pixel = ctx.getImageData(x, y, 1, 1);\n        const data = pixel.data;\n        const hex = RGBAToHexA([data[0], data[1], data[2]]);\n\n        (document.getElementById('check-color') as HTMLInputElement).value = hex\n    }\n\n    // @ts-expect-error\n    if (event.target.id === 'fixed-canvas' && event.ctrlKey === false)\n    {\n        const ctx = fixedCanvas.getContext('2d');\n        if (!ctx) return;\n\n        const x = event.offsetX / image.zoom;\n        const y = event.offsetY / image.zoom;\n\n        const pixel = ctx.getImageData(x, y, 1, 1);\n        const data = pixel.data;\n        const hex = RGBAToHexA([data[0], data[1], data[2]]);\n\n        (document.getElementById('check-color') as HTMLInputElement).value = hex\n    }\n\n    // @ts-expect-error\n    if (event.target.id === 'fixed-canvas' && event.ctrlKey === true)\n    {\n        const x = Math.floor(event.offsetX / image.zoom);\n        const y = Math.floor(event.offsetY / image.zoom);\n        pasteColor(x, y);\n    }\n}\n\nfunction pasteColor(x: number, y: number)\n{\n    const ctx = fixedCanvas.getContext('2d');\n    if (!ctx) return;\n\n    const hexColor = (document.getElementById('check-color') as HTMLInputElement).value;\n    const rgbColor = hexToRGB(hexColor);\n\n    const previousData = ctx.getImageData(x, y, 1, 1);\n    addUndotask(previousData, x, y, 1, 1);\n\n    const checkedPixel = ctx.getImageData(x, y, 1, 1);\n    checkedPixel.data[0] = rgbColor[0];\n    checkedPixel.data[1] = rgbColor[1];\n    checkedPixel.data[2] = rgbColor[2];\n    checkedPixel.data[3] = 255;\n\n    ctx.putImageData(checkedPixel, x, y);\n}\n\nfunction addUndotask(data: ImageData, x: number, y: number, width: number, height: number)\n{\n    const undo = new Task(data, x, y, width, height);\n    undos.push(undo);\n    undoBtn.disabled = false;\n}\n\nfunction addRedotask(data: ImageData, x: number, y: number, width: number, height: number)\n{\n    const redo = new Task(data, x, y, width, height);\n    redos.push(redo);\n    redoBtn.disabled = false;\n}\n\nfunction undo()\n{\n    const lastTask = undos.at(-1);\n    if (!lastTask) return;\n\n    const ctx = fixedCanvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    const redoData = ctx.getImageData(lastTask.x, lastTask.y, 1, 1);\n    addRedotask(redoData, lastTask.x, lastTask.y, lastTask.width, lastTask.height)\n\n    ctx.clearRect(lastTask.x, lastTask.y, 1, 1);\n    ctx.putImageData(lastTask.data, lastTask.x, lastTask.y);\n    undos.pop();\n\n    if (undos.length === 0)\n    {\n        undoBtn.disabled = true;\n    }\n}\n\nfunction redo()\n{\n    const lastTask = redos.at(-1);\n    if (!lastTask) return;\n\n    const ctx = fixedCanvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    const undoData = ctx.getImageData(lastTask.x, lastTask.y, lastTask.width, lastTask.height);\n    addUndotask(undoData, lastTask.x, lastTask.y, lastTask.width, lastTask.height);\n\n    ctx.clearRect(lastTask.x, lastTask.y, 1, 1);\n    ctx.putImageData(lastTask.data, lastTask.x, lastTask.y);\n    redos.pop();\n\n    if (redos.length === 0)\n    {\n        redoBtn.disabled = true;\n    }\n}\n"],
  "mappings": "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",
  "names": ["Task", "data", "x", "y", "width", "height", "saveImageBtn", "imageElm", "imageCanvas", "leftPanel", "rightPanel", "fixedCanvas", "checkCanvas", "checkOnlyElm", "multipassElm", "consoleElm", "undoBtn", "redoBtn", "image", "checkOnly", "multipass", "pixelCorrectionCount", "noPixelCorrectionCount", "lastPixelCorrectionCount", "undos", "redos", "visibleModal", "_a", "navbarHeight", "elm", "closeModal", "openImage", "openModal", "onMouseWheel", "handleKeyPress", "pickColor", "check", "setMultipass", "undo", "redo", "downloadTilesetAsImage", "handleRightScroll", "handleLeftScroll", "handleCursor", "event", "modal", "imageFiles", "imageSrc", "e", "drawImage", "checkOrphanPixels", "showAlertResult", "date", "codeElm", "reset", "ctx", "ctx2", "ctx3", "width", "height", "hexColor", "rgbColor", "hexToRGB", "y", "x", "checkedPixel", "checkedPixelColor", "neighboringColors", "getNeighboringColors", "mainColor", "getMainColor", "rgba", "data", "pixelX", "pixelY", "pixels", "colors", "i", "pixelColor", "color", "arr", "obj", "acc", "value", "fixedImage", "xhr", "a", "scrollX", "scrollY", "zoomFactor", "clamp", "canvas", "img", "number", "min", "max", "hex", "r", "g", "b", "RGBAToHexA", "forceRemoveAlpha", "string", "pasteColor", "previousData", "addUndotask", "Task", "addRedotask", "lastTask", "redoData", "undoData"]
}
